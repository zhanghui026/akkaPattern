# Zeus Application Config File
# Time key auto-generated: 2012-07-31 12:50:15

# DB config
db {
  default {
    password = aims
    user = aims
    url = "jdbc:mysql://192.168.243.216:3306/aims"
    driver = "com.mysql.jdbc.Driver"
    isolation = "READ_COMMITED"
    logStatements = "true"
  }
  aimstest {
    url = "jdbc:mysql://192.168.241.102:3306/aimstest"
    password = aimstest
    user = aimstest
    driver = "com.mysql.jdbc.Driver"
  }
  aims2 {
    user = adcc_client
    password = adcc_swclient
    url = "jdbc:jtds:sqlserver://192.168.241.161:1433/AftnDspTchDB"
    driver = "net.sourceforge.jtds.jdbc.Driver"
  }
  aimsjob {
    password = aims
    user = aims
    driver = "com.mysql.jdbc.Driver"
    url = "jdbc:mysql://192.168.242.121:3306/aims"
    isolation = "READ_COMMITED"
  }
}
# Main Config
zeus {
  # System version
  version = "1.0.0"
  # Akka config
  akka {
    # Log level for the very basic logger activated during AkkaApplication startup
    # Options: ERROR, WARNING, INFO, DEBUG
    stdout-loglevel = DEBUG
    # Event handlers to register at boot time (Logging$DefaultLogger logs to STDOUT)
    event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
    # Toggles whether the threads created by this ActorSystem should be daemons or not
    daemonic = off
    # Log level used by the configured loggers (see "event-handlers") as soon
    # as they have been started; before that, see "stdout-loglevel"
    # Options: ERROR, WARNING, INFO, DEBUG
    loglevel = DEBUG
    actor {
      provider = "akka.actor.LocalActorRefProvider"
      deployment {
        /pretreatmentRouter {
          router = round-robin
          # within is the timeout used for routers containing future calls
          within = 1000 ms
          # number of children to create in case of a non-direct router; this setting
          # is ignored if routees.paths is given
          nr-of-instances = 30
        }
        /resultRouter {
          router = round-robin
          # number of children to create in case of a non-direct router; this setting
          # is ignored if routees.paths is given
          nr-of-instances = 30
          # within is the timeout used for routers containing future calls
          within = 1000 ms
        }
        /messageRouter {
          # number of children to create in case of a non-direct router; this setting
          # is ignored if routees.paths is given
          nr-of-instances = 50
          router = round-robin
          # within is the timeout used for routers containing future calls
          within = 1000 ms
        }
        /parserRouter {
          # number of children to create in case of a non-direct router; this setting
          # is ignored if routees.paths is given
          nr-of-instances = 30
          router = round-robin
          # within is the timeout used for routers containing future calls
          within = 1000 ms
        }
        /resultListenerRouter {
          router = round-robin
          # within is the timeout used for routers containing future calls
          within = 1000 ms
          # number of children to create in case of a non-direct router; this setting
          # is ignored if routees.paths is given
          nr-of-instances = 30
        }
        /triggerRouter {
          # number of children to create in case of a non-direct router; this setting
          # is ignored if routees.paths is given
          nr-of-instances = 30
          # within is the timeout used for routers containing future calls
          within = 1000 ms
          router = round-robin
        }
      }
      mailbox {
        redis {
          # port at which the redis queue resides
          port = 6379
          # hostname of where the redis queue resides
          hostname = "192.168.243.120"
        }
      }
    }
  }
  db {
    # default db name
    default = default
  }
  # for fds job
  job {
    dyna {
      span {
        # can only set 2 or 3
        days = 3
      }
      refresh {
        # refresh time  5minute
        time = 5 m
      }
      into {
        History {
          # into history time cron ,fire at 0:00 am
          cron = "0 0 0 * * ?"
        }
      }
    }
  }
  # Message config
  msg {
    # System support message types
    # example:
    # AFTNType,SITAType,AIDCType,WeatherType,NOTAMType,ZBBBType,CheckType,OtherType
    types = ["zeus.msg.identifier.AFTNType", "zeus.msg.identifier.SITAType", "zeus.msg.identifier.WeatherType", "zeus.msg.identifier.NOTAMType", "zeus.msg.identifier.CheckType", "zeus.msg.identifier.AIDCType", "zeus.msg.identifier.ZBBBType", "zeus.msg.identifier.InnerType", "zeus.msg.identifier.OtherType"]
    identifier {
      # The thirdparty identifier out of the zeus system
      # no is empty
      other = no
      # Major Identifier
      major {
        # ZBBB
        ZBBB = "(?:.|\\n|\\r)*(?:SS|DD|FF|GG)\\W*((?:[A-Z]{4}[A-Z0-9]{4}\\s*)*(?:[A-Z]{4}[A-Z0-9]{4}))(?:\\s*\\r*\\n*[0-9]{6}\\s*ZBBB[A-Z0-9]{4}\\r*\\n*\\W*\\r*\\n*)(?:[A-Z]|[0-9])(?:.|\\n|\\r)*"
        # AFTN
        AFTN = "(?:.|\\n|\\r)*(?:SS|DD|FF|GG)\\W*((?:[A-Z]{4}[A-Z0-9]{4}\\s*)*(?:[A-Z]{4}[A-Z0-9]{4}))(?:\\s*\\r*\\n*[0-9]{6}\\s*[A-Z]{4}[A-Z0-9]{4}\\r*\\n*\\W*\\r*\\n*)(?:\\([A-Z]{3})(?:.|\\n|\\r)*"
        # NOTAM
        NOTAM = "(?:.|\\n|\\r)*(NOTAM|SNOWTAM|ASHTAM|RQN|NTM)(?:.|\\n|\\r)*"
        # Inner
        Inner = "(?:\\{\\W@class\\W*:\\W*)([\\w\\.]*)(?:.|\\n|\\r)*"
        # Weather
        Weather = "(?:.|\\n|\\r)*(METAR|SPECI|TAF|ARFOR|ROFOR)(?:.|\\n|\\r)*"
        # AIDC
        AIDC = "(?:.|\\n|\\r)*(?:SS|DD|FF|GG)\\W*((?:[A-Z]{8}\\s)*(?:[A-Z]{8}))(?:\\r?\\n?[0-9]{6}\\s[A-Z]{8}\\s(?:(?:[0-9].*-)*)\\r?\\n?)(?:\\()(?:.|\\n|\\r)*"
        # SITA
        SITA = "(?:.|\\n|\\r)*(?:Q[A-Z])\\W+((?:[A-Z]{3}[A-Z0-9]{4}\\s*)*(?:[A-Z]{3}[A-Z0-9]{4}))(?s)(?:.|\\n|\\r)*"
        # Check
        Check = "(?:.|\\n|\\r)*(CH LR)(?:.|\\n|\\r)*"
      }
    }
    pretreatment {
      # ID result
      idResult = "aims.service.pretreatment.SaveMessageService"
      # Message Pretreatment
      # Sequence invoke
      pretreatments = ["aims.service.pretreatment.RepeatMessageService", "aims.service.pretreatment.SaveMessageService", "aims.service.pretreatment.IdentifierService"]
      # repeat message time(second)
      repeat = -1
      # When pretreatment has result, system cannot parse message!
      cannotParses = ["aims.service.pretreatment.RepeatMessageService"]
      # When handle again, system cannot invoke this pretreatment!
      againPretreatments = ["aims.service.pretreatment.RepeatMessageService", "aims.service.pretreatment.SaveMessageService"]
    }
    # result configuration
    result {
      # Message Results
      # Sequence invoke
      results = ["aims.service.result.InputOnDutyService", "aims.service.result.SSRService", "aims.service.result.InnerMessageRecvService", "aims.service.result.SendMessageService"]
      # Onduty Black List
      onduty {
        results = ["TYPE_PARSE_ERROR", "TYPE_TRIGGER_STOP", "TYPE_TRIGGER_BLACK_LIST"]
        # Black List
        blacks {
          Weather = ["WEATHER_TYPE=METAR", "WEATHER_TYPE=SPECI", "WEATHER_TYPE=TAF", "WEATHER_TYPE=ARFOR", "WEATHER_TYPE=ROFOR", "ERROR=Any"]
          SITA = ["SITA_TYPE=None,DEPT=ZP", "SITA_TYPE=MVT,DEPT=ZP", "SITA_TYPE=CLR,DEPT=ZP", "SITA_TYPE=PLN,DEPT=ZP", "ERROR=Any,DEPT=ZP",
"EFFECT=!UPDATE_DYNA_PLAN_EFFECT,DEPT=ZP"]
          AFTN = ["AFTN_TYPE=None", "AFTN_TYPE=DEP,AFTN_DEP_AP=ZYTX,DEPT=ZP", "AFTN_TYPE=DEP,AFTN_ARR_AP=ZYTX,DEPT=ZP",
"AFTN_TYPE=ARR,AFTN_DEP_AP=ZYTX,DEPT=ZP", "AFTN_TYPE=ARR,AFTN_ARR_AP=ZYTX,DEPT=ZP", "AFTN_TYPE=CPL,DEPT=ZP|ZB", "AFTN_TYPE=PLN,DEPT=ZR|ZB",
"AFTN_TYPE=FPL,AFTN_DEP_AP=ZYTX,DEPT=ZP", "AFTN_TYPE=CNL,AFTN_DEP_AP=ZYTX,DEPT=ZP", "AFTN_TYPE=CNL,AFTN_DEST_AP=ZYTX,DEPT=ZP",
"AFTN_AN_ID=&(B\\d+|CHF7\\d+|CHF9\\d+),DEPT=ZR", "ERROR=Any", "EFFECT=!UPDATE_DYNA_PLAN_EFFECT",
"AFTN_GP18=&.*(ZYYY|DEST/500|DEP/500|DEST/496|DEP/496|DEST/SUJIATUN|DEP/SUJIATUN).*,DEPT=ZP", "AFTN_TYPE=EST,DEPT=ZR",
"AFTN_GP18=&.*(VIP|STS).*,DEPT=ZR", "AFTN_ROUTE=&.*(SARUL|TELOK|SIMLI|MAGIT|ARGUK|BISUN|GOLOT|TOMUK|WQG|SANAR|IGROD|KADBO|DDG|GASAN|JONJU).*,DEPT=ZR",
"AFTN_MSG_SND_ADDRESS=&(.*OIXX|ZSPL.*|ZBTG.*),DEPT=ZR", "AFTN_DEP_AP=&RK.*,AFTN_DEST_AP=ZYYJ,DEPT=ZR", "AFTN_DEP_AP=&RK.*,AFTN_ARR_AP=ZYYJ,DEPT=ZR",
"AFTN_DEP_AP=&RK.*,AFTN_DEST_AP=ZYMD,DEPT=ZR", "AFTN_DEP_AP=&RK.*,AFTN_ARR_AP=ZYMD,DEPT=ZR", "AFTN_CRUSING_HEIGHT=&S0(5|4|3|2|1|0)\\d+,DEPT=ZR",
"AFTN_TYPE=CHG,AFTN_DEP_AP=ZYTX,DEPT=ZP", "EFFECT=AUTO_CREATE_DYNA_PLAN_EFFECT,DEPT=ZR", "EFFECT=CHECK_CRUISING_HEIGHT_EFFECT,DEPT=ZR"]
          NOTAM = ["NOTAM_TYPE=NOTAM,DEPT=ZP", "NOTAM_TYPE=SNOWTAM,DEPT=ZP", "NOTAM_TYPE=ASHTAM,DEPT=ZP", "NOTAM_TYPE=RQ,DEPT=ZP",
"NOTAM_TYPE=SVC,DEPT=ZP", "ERROR=Any,DEPT=ZP"]
          ZBBB = ["ZBBB_TYPE=SKD,DEPT=ZP|ZB|ZR", "ZBBB_TYPE=NSK,DEPT=ZP|ZB|ZR", "ERROR=Any,DEPT=ZP|ZB|ZR"]
        }
      }
    }
    # notam parser
    notam {
      parser {
        # Optional
        optional {
          SVC = ""
          ASHTAM = I
          # SNOWTAM = "D,E,F,G,H,J,K,L,M,N,P,R,S,T"
          SNOWTAM = "R,S,T"
          NOTAM = "C,D,F,G"
          RQ = ""
        }
        # Required
        required {
          SVC = ""
          ASHTAM = "A,B,C,D,E,F,G,H,J,K"
          # SNOWTAM = "A,B,C"
          SNOWTAM = "A,B"
          NOTAM = "Q,A,B,E"
          RQ = ""
        }
      }
    }
    # sita parser
    sita {
      parser {
        # Required
        required {
          MVT = MCF
          PLN = "PCF,CCF"
          CLR = ""
        }
        # Optional
        optional {
          MVT = "AD,AA,DL,EA,ED,NI,SI"
          CLR = (FPL
          PLN = ""
        }
      }
    }
    # aftn parser
    aftn {
      # AFTN Parser type, 0 is compatiable,1 is just new format ,2 is just old format
      parserType = 0
      # special for missing gps
      validity {
        CPL {
          regex = "[\\S]*"
          group = 14
          type = "missing"
          index = 6
        }
        ARR {
          index = 3
          group = 16
          type = "lostLastLike"
          regex = "[A-Z]{4}.*"
        }
        CHG {
          type = "missing"
          group = 18
          index = 4
          # indentify with next group
          regex = "0|^[^\\d].*"
        }
      }
      parser {
        # old format aftn type
        PLN = "3,4,7,8,9,13,16,15,18,19"
        LAM = 3
        CDN = "3,7,13,16,22+"
        OVFLY = "3,7,13,14,16"
        # add parser groups
        FPL = "3,7,8,9,10,13,15,16,18,19"
        COR = "3,4,7,13,16,22+"
        ALR = "3,5,7,8,9,10,13,15,16,18,19,20"
        ALN = "3,7,13,14,15,16,18"
        ACP = "3,7,13,16"
        CHG = "3,7,13,16,18,22+"
        ARR = "3,7,13,16,17"
        CNL = "3,7,13,16,18"
        EST = "3,7,13,14,16"
        RQP = "3,7,13,16,18"
        CPL = "3,7,8,9,10,13,14,15,16,18"
        ABS = "3,4,7,13,16"
        SPL = "3,7,13,16,18,19"
        DEP = "3,7,13,16,18"
        DLA = "3,7,13,16,18"
        RTN = "3,7,13,14,16,18"
        RQS = "3,7,13,16,18"
        RCF = "3,7,21"
      }
    }
    # Message Parsers
    parsers {
      AFTN = "zeus.msg.parser.aftn.AFTNParser"
      Weather = "zeus.msg.parser.weather.WeatherParser"
      NOTAM = "zeus.msg.parser.notam.NOTAMParser"
      SITA = "zeus.msg.parser.sita.SITAParser"
      ZBBB = "zeus.msg.parser.zbbb.ZBBBParser"
    }
    # trigger configuration
    trigger {
      # FPL cached time(hour)
      FPL = 8
      # AFTN Cache Types
      cacheAFTN = ["FPL", "CHG", "DLA", "RQP", "RQS", "CNL"]
      # DEPTime match hours range
      depRange = 4
      # When trigger has result, system cannot trigger message after this trigger!
      cannotTriggers = ["aims.service.trigger.OldMessageService", "aims.service.trigger.BlackService", "aims.service.trigger.EarlyAFTNService"]
      # When handle again, system cannot invoke this trigger!
      againTriggers = ["aims.service.trigger.OldMessageService", "aims.service.trigger.ParseResultSaveService", "aims.service.trigger.BlackService"]
      # Message Triggers
      # Sequence invoke
      triggers = ["aims.service.trigger.OldMessageService", "aims.service.trigger.ParseResultSaveService", "aims.service.trigger.BlackService", "aims.service.trigger.EarlyAFTNService", "aims.service.trigger.ParseRouteService", "aims.service.trigger.UpdateDynaFlightService"]
      # old message time(hour)
      oldMessage = -1
      # Black List
      blacks {
        SITA = ["SITA_TYPE=None", "SITA_TYPE=CLR", "ERROR=Any"]
        AFTN = ["AFTN_TYPE=None", "AFTN_TYPE=FPL,AFTN_DEP_AP=ZYTX,AFTN_MSG_SND_ADDRESS=!ZYTXZPZX",
         "AFTN_MSG_SND_ADDRESS=ZYTXUOXX", "AFTN_MSG_SND_ADDRESS=ZGGGUOXX", "ERROR=Any"]
      }

      # SysMemo
      sysMemo{
         FPLHandler{
            FN = ["AFTN_EET>FOREIGN", "AFTN_EET>PILOT", "AFTN_EET>014"]
            TC = ["AFTN_RMK<TCAS","AFTN_RMK<ACAS"]
            NON_PBN_18 =["+","AFTN_GP18<PBN/","AFTN_ROUTE>G212"]
            NON_PBN_10 =["+","AFTN_AIRBORNE_EQUIPMENT<R","AFTN_ROUTE>G212"]
         }
          CPLHandler{
            NON_PBN_18 =["+","AFTN_GP18<PBN/","AFTN_ROUTE>G212"]
            NON_PBN_10 =["+","AFTN_AIRBORNE_EQUIPMENT<R","AFTN_ROUTE>G212"]
         }
          ALRHandler{
            NON_PBN_18 =["+","AFTN_GP18<PBN/","AFTN_ROUTE>G212"]
            NON_PBN_10 =["+","AFTN_AIRBORNE_EQUIPMENT<R","AFTN_ROUTE>G212"]
         }
          CHGHandler{
             NON_PBN_18 =["+","CHG_AFTN_GP18<PBN/","CHG_AFTN_ROUTE>G212"]
             NON_PBN_10 =["+","CHG_AFTN_AIRBORNE_EQUIPMENT<R","CHG_AFTN_ROUTE>G212"]
         }
      }
   }
 }
 # Redis configuration
  redis {
    # server ip
    ip = "192.168.243.120"
    # server port
    port = 6379
  }
  management {
    # webapp = "/"
    webadmin = ["http://0.0.0.0:58080", "https://0.0.0.0:58081"]
    keyStorage {
      file = "keystore"
      password = "password"
      keyPassword = "password"
    }
    resources = ["zeus.api.management.web.resources.RootResource", "zeus.api.management.web.resources.ZeusApiListing",
     "com.wordnik.swagger.jaxrs.ApiHelpMessageBodyWriter", "zeus.api.management.web.resources.JvmResourceHTML",
      "zeus.api.management.web.resources.JvmResourceJSON", "zeus.api.management.web.resources.JvmResourceHelp",
      "zeus.api.management.web.resources.ConfigurationResourceHTML", "zeus.api.management.web.resources.ConfigurationResourceJSON", "zeus.api.management.web.resources.ConfigurationResourceHelp",
      "zeus.api.management.web.resources.MQResourceHTML", "zeus.api.management.web.resources.MQResourceJSON", "zeus.api.management.web.resources.MQResourceHelp",
      "zeus.api.management.web.resources.RedisResourceHTML", "zeus.api.management.web.resources.RedisResourceJSON", "zeus.api.management.web.resources.RedisResourceHelp",
      "zeus.api.management.web.resources.LogResourceHTML", "zeus.api.management.web.resources.LogResourceJSON", "zeus.api.management.web.resources.LogResourceHelp",
      "zeus.api.management.web.resources.DBResourceHTML", "zeus.api.management.web.resources.DBResourceJSON", "zeus.api.management.web.resources.DBResourceHelp",
      "zeus.api.management.web.resources.UpdateResourceHTML", "zeus.api.management.web.resources.UpdateResourceJSON", "zeus.api.management.web.resources.UpdateResourceHelp",
      "zeus.demo.DemoResourceHTML", "zeus.demo.DemoResourceJSON", "zeus.demo.DemoResourceHelp",
      "zeus.api.management.web.resources.JacksonJsonProvider", "zeus.api.management.web.resources.JaxrsExceptionMapper",
       "org.fusesource.scalate.jersey.ScalateTemplateProvider", "org.fusesource.scalate.jersey.ScalateTemplateProcessor"]
  }
}
# MQ config
mq {
  zeus {
    ip = "192.168.241.161"
    port = 61613
    username = admin
    password = password
  }
  aims {
    ip = "192.168.241.161"
    username = admin
    port = 61613
    fds = /queue/fds
    fdm = /topic/fdm
    password = password
  }
  # Gateway mq
  gateway {
    down = /queue/aftndown
    ip = "192.168.241.161"
    up = /queue/aftnup
    port = 61616
    protocol = tcp
  }
}

